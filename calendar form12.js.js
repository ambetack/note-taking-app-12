import React from "react";
import Form from "react-bootstrap/Form";
import Col from "react-bootstrap/Col";
import DatePicker from "react-datepicker";
import Button from "react-bootstrap/Button";
import {
  addCalendar,
  editCalendar,
  getCalendar,
  deleteCalendar
} from "./requests";
import { observer } from "mobx-react";
const buttonStyle = { margin right:10};
function CalendarForm({ calendarStore, calendarEvent, onCancel, edit }) {
    const [start, setStart] = React.useState(null);
    const [end, setEnd] = React.useState(null);
    const [title, setTitle] = React.useState("");
    const [id, setId] = React.useState(null);
  React.useEffect(() => {
      setTitle(calendarEvent.title);
      setStart(calendarEvent.start);
      setEnd(calendarEvent.end);
      setId(calendarEvent.id);
    },  [
        calendarEvent.title,
        calendarEvent.start,
        calendarEvent.end,
        calendarEvent.id
      ]);
    const handleSubmit = async ev => {
        ev.preventDefault();
        if (!title || !start || !end) {
          return;
        }
    if (+start > +end) {
          alert("Start date must be earlier than end date");
          return;
        }
        const data = { id, title, start, end };
        if (!edit) {
          await addCalendar(data);
        } else {
          await editCalendar(data);
        }
        const response = await getCalendar();
        const evs = response.data.map(d => {
          return {
            ...d,
            start: new Date(d.start),
            end: new Date(d.end)
          };
        });
        calendarStore.setCalendarEvents(evs);
        onCancel();
      };
      const handleStartChange = date => setStart(date);
      const handleEndChange = date => setEnd(date);
      const handleTitleChange = ev => setTitle(ev.target.value);
    const deleteCalendarEvent = async () => {
        await deleteCalendar(calendarEvent.id);
        const response = await getCalendar();
        const evs = response.data.map(d => {
          return {
            ...d,
            start: new Date(d.start),
            end: new Date(d.end)
          };
        });
        calendarStore.setCalendarEvents(evs);
        onCancel();
      };
    return (
        <Form noValidate onSubmit={handleSubmit}>
          <Form.Row>
            <Form.Group as={Col} md="12" controlId="title">
              <Form.Label>Title</Form.Label>
              <Form.Control
                type="text"
                name="title"
                placeholder="Title"
                value={title || ""}
                onChange={handleTitleChange}
                isInvalid={!title}
              />
              <Form.Control.Feedback type="invalid">{!title}</Form.Control.Feedback>
            </Form.Group>
          </Form.Row>
    <Form.Row>
            <Form.Group as={Col} md="12" controlId="start">
              <Form.Label>Start</Form.Label>
              <br />
              <DatePicker
                showTimeSelect
                className="form-control"
                selected={start}
                onChange={handleStartChange}
              />
            </Form.Group>
          </Form.Row>
    <Form.Row>
            <Form.Group as={Col} md="12" controlId="end">
              <Form.Label>End</Form.Label>
              <br />
              <DatePicker
                showTimeSelect
                className="form-control"
                selected={end}
                onChange={handleEndChange}
              />
            </Form.Group>
          </Form.Row>
          <Button type="submit" style={buttonStyle}>
            Save
          </Button>
          <Button type="button" style={buttonStyle} onClick={deleteCalendarEvent}>
            Delete
          </Button>
          <Button type="button" onClick={onCancel}>
            Cancel
          </Button>
        </Form>
      );
    }
    export default observer(CalendarForm);
    
    The other 2 fields are the start and end dates. We use React Datepicker in here to let use select the start and end dates of a calendar entry. In addition, we enable the time picker to let users pick the time.
    
    There are change handlers in each field to update the values in the state so users can see what they entered and let them submit the data later. The change handlers are handleStartChange , handleEndChange and handleTitleChange . We set the states with the setter functions generated by the useState hooks.
    
    We use the useEffect callback to set the fields in the calendarEvent prop to the states. We pass all the fields we want to set to the array in the second argument of the useEffect function so that the states will be updated whenever the latest value of the calendarEvent prop is passed in.
    
    In the handleSubmit function, which is called when the form Save button is clicked. we have to call ev.preventDefault so that we can use Ajax to submit our form data.
    
    If data validation passes, then we submit the data and get the latest and store them in our calendarStore MobX store.
    
    We wrap observer outside the CalendarForm component so that we always get the latest values from calendarStore .
    
    Next we create our home page. Create a HomePage.js file in the src folder and add:
    import React from "react";
    import { Calendar, momentLocalizer } from "react-big-calendar";
    import moment from "moment";
    import Modal from "react-bootstrap/Modal";
    import CalendarForm from "./CalendarForm";
    import { observer } from "mobx-react";
    import { getCalendar } from "./requests";
    const localizer = momentLocalizer(moment);
    function HomePage({ calendarStore }) {
      const [showAddModal, setShowAddModal] = React.useState(false);
      const [showEditModal, setShowEditModal] = React.useState(false);
      const [calendarEvent, setCalendarEvent] = React.useState({});
      const [initialized, setInitialized] = React.useState(false);
      const hideModals = () => {
        setShowAddModal(false);
        setShowEditModal(false);
      };
      const getCalendarEvents = async () => {
        const response = await getCalendar();
        const evs = response.data.map(d => {
          return {
            ...d,
            start: new Date(d.start),
            end: new Date(d.end)
          };
        });
        calendarStore.setCalendarEvents(evs);
        setInitialized(true);
      };
      const handleSelect = (event, e) => {
        const { start, end } = event;
        const data = { title: "", start, end, allDay: false };
        setShowAddModal(true);
        setShowEditModal(false);
        setCalendarEvent(data);
      };
      const handleSelectEvent = (event, e) => {
        setShowAddModal(false);
        setShowEditModal(true);
        let { id, title, start, end, allDay } = event;
        start = new Date(start);
        end = new Date(end);
        const data = { id, title, start, end, allDay };
        setCalendarEvent(data);
      };
      React.useEffect(() => {
        if (!initialized) {
          getCalendarEvents();
        }
      });
      return (
        <div className="page">
          <Modal show={showAddModal} onHide={hideModals}>
            <Modal.Header closeButton>
              <Modal.Title>Add Calendar Event</Modal.Title>
            </Modal.Header>
            <Modal.Body>
              <CalendarForm
                calendarStore={calendarStore}
                calendarEvent={calendarEvent}
                onCancel={hideModals.bind(this)}
                edit={false}
              />
            </Modal.Body>
          </Modal>
          <Modal show={showEditModal} onHide={hideModals}>
            <Modal.Header closeButton>
              <Modal.Title>Edit Calendar Event</Modal.Title>
            </Modal.Header>
            <Modal.Body>
              <CalendarForm
                calendarStore={calendarStore}
                calendarEvent={calendarEvent}
                onCancel={hideModals.bind(this)}
                edit={true}
              />
            </Modal.Body>
          </Modal>
          <Calendar
            localizer={localizer}
            events={calendarStore.calendarEvents}
            startAccessor="start"
            endAccessor="end"
            selectable={true}
            style={{ height: "70vh" }}
            onSelectSlot={handleSelect}
            onSelectEvent={handleSelectEvent}
          />
        </div>
      );
    }
    export default observer(HomePage);
    We get the calendar entries and populate them in the calendar here. The entries are retrieved from back end and then saved into the store. In the useEffect callback, we set get the items when the page loads. We only do it when initialized is false so we wonâ€™t be reloading the data every time the page renders.
    
    To open the modal for adding calendar entries, we set the onSelectSlot prop with our handler so that we can call setShowAddModal and setCalendarEvent to set open the modal and set the dates before opening the add calendar event modal.
    
    Similarly, we set the onSelectEvent modal with the handleSelectEvent handler function so that we open the edit modal and set the calendar event data of the existing entry.
    
    Each Modal have the CalendarForm component inside. We pass in the function for closing the modals into the form so that we can close them from the form. Also, we pass in the calendarStore and calendarEvent so that they can be manipulated in the CalendarForm.
    
    We wrap observer outside the CalendarForm component so that we always get the latest values from calendarStore .
    
    Next in index.js , we replace the existing code with:
    import React from "react";
    import ReactDOM from "react-dom";
    import "./index.css";
    import App from "./App";
    import * as serviceWorker from "./serviceWorker";
    import { CalendarStore } from "./store";
    const calendarStore = new CalendarStore();
    ReactDOM.render(
      <App calendarStore={calendarStore} />,
      document.getElementById("root")
    );
    // If you want your app to work offline and load faster, you can change
    // unregister() to register() below. Note this comes with some pitfalls.
    // Learn more about service workers: https://bit.ly/CRA-PWA
    serviceWorker.unregister();
    so that we can pass in the MobX calendarStore into the root App component.
    
    Next create a requests.js file in the src folder and add:
    const APIURL = "http://localhost:3000";
    const axios = require("axios");
    export const getCalendar = () => axios.get(`${APIURL}/calendar`);
    export const addCalendar = data => axios.post(`${APIURL}/calendar`, data);
    export const editCalendar = data =>
      axios.put(`${APIURL}/calendar/${data.id}`, data);
    export const deleteCalendar = id => axios.delete(`${APIURL}/calendar/${id}`);
    These are the functions for making the HTTP calls to manipulate the calendar entries.
    
    Next createstore.js in the src folder and add:
    import { observable, action, decorate } from "mobx";
    class CalendarStore {
      calendarEvents = [];
    setCalendarEvents(calendarEvents) {
        this.calendarEvents = calendarEvents;
      }
    }
    CalendarStore = decorate(CalendarStore, {
      calendarEvents: observable,
      setCalendarEvents: action
    });
    export { CalendarStore };
    to save the items in the store for access by all of our components.
    
    Next in index.html , replace the existing code with:
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="utf-8" />
        <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="theme-color" content="#000000" />
        <meta
          name="description"
          content="Web site created using create-react-app"
        />
        <link rel="apple-touch-icon" href="logo192.png" />
       

    